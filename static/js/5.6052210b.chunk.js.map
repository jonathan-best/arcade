{"version":3,"sources":["games/pacman/scenes/bootScene.js","games/pacman/classes/player.js","games/pacman/classes/ghost.js","games/pacman/scenes/gameScene.js","games/pacman/scenes/gameOverScene.js","games/pacman/scenes/winnerScene.js","games/pacman/config/config.js","games/pacman/index.js"],"names":["BootScene","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","clientHeight","game","canvas","add","text","input","manager","enabled","cursors","keyboard","createCursorKeys","space","isDown","scene","start","Phaser","Scene","Player","Class","Extends","Physics","Arcade","Sprite","initialize","x","y","width","height","speed","_this$scene","layer","physics","collider","play","moveUp","body","setVelocityY","angle","moveDown","moveLeft","setVelocityX","moveRight","die","_this","on","disableBody","Ghost","ghostType","changeDirection","directions","currentDirection","surroundingDirections","direction","right","getTileAtWorldXY","left","up","down","index","randomDirection","objectKeys","keys","directionCount","length","directionKey","Math","floor","random","concat","GameScene","key","load","image","spritesheet","frameWidth","frameHeight","tilemapTiledJSON","score","safeTile","tileSize","scoreText","anims","create","frames","generateFrameNumbers","end","frameRate","repeat","ghostDirections","spriteIndex","forEach","ghost","map","make","tilemap","tileset","addTilesetImage","dotTile","createDynamicLayer","dotLayer","setCollisionByExclusion","setTileIndexCallback","eatDot","winningScore","properties","dots","player","existing","PlayerClass","ghosts","group","classType","GhostClass","runChildUpdate","blinky","get","inky","pinky","clyde","overlap","gameOver","time","nextDirection","canTurn","sprite","tile","removeTileAt","PostScene","_this$game$canvas","clientWidth","config","type","AUTO","parent","default","GameOverScene","WinningScene","extend","Game","PacmanConfig","console","log","destroy","react_default","a","createElement","className","id","Component"],"mappings":"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","file":"static/js/5.6052210b.chunk.js","sourcesContent":["import Phaser from 'phaser';\n\nexport default class BootScene extends Phaser.Scene {\n  constructor () {\n    super('Boot');\n  }\n\n  create () {\n    const {clientHeight} = this.game.canvas;\n    this.add.text(120 , (clientHeight / 2 - 10), 'Press Spacebar To Start');\n    this.input.manager.enabled = true;\n    this.cursors = this.input.keyboard.createCursorKeys();\n  }\n\n  update () {\n    if (this.cursors.space.isDown) {\n      this.scene.start('Game');\n    }\n  }\n};\n","import Phaser from 'phaser';\n\nconst Player = new Phaser.Class({\n\n  Extends: Phaser.Physics.Arcade.Sprite,\n\n  initialize:\n\n  function Player (scene, x, y, width, height, speed) {\n    Phaser.Physics.Arcade.Sprite.call(this, scene, x, y, 'characters');\n\n    let { layer, physics } = this.scene;\n    physics.add.collider(this, layer);\n\n    this.play('pacman-eat', true);\n  },\n\n  moveUp () {\n    this.body.setVelocityY(-100);\n    this.angle = 270;\n  },\n\n  moveDown () {\n    this.body.setVelocityY(100);\n    this.angle = 90;\n  },\n\n  moveLeft () {\n    this.body.setVelocityX(-100);\n    this.angle = 180;\n  },\n\n  moveRight () {\n    this.body.setVelocityX(100);\n    this.angle = 0;\n  },\n\n  die () {\n    this.play('pacman-die', true);\n\n    this.body.setVelocityX(0);\n    this.body.setVelocityY(0);\n\n    this.on('animationcomplete', () => {\n      this.disableBody(true, true);\n      this.scene.game.scene.start('GameOver');\n    });\n  },\n});\n\nexport default Player;\n","import Phaser from 'phaser';\n\nconst Ghost = new Phaser.Class({\n\n  Extends: Phaser.Physics.Arcade.Sprite,\n\n  initialize:\n\n  function Ghost (scene, x, y, ghostType) {\n    Phaser.Physics.Arcade.Sprite.call(this, scene, x, y, 'characters');\n    //Phaser.Physics.Arcade.Sprite.call(this, scene, 10 * 16, 15 * 16, 'ghost');\n    \n    let { layer, physics } = this.scene;\n\n    physics.add.collider(this, layer, () => {\n      this.changeDirection();\n    });\n\n    this.ghostType = ghostType;\n  },\n\n  directions: {},\n  currentDirection: '',\n\n  start () {\n    this.moveRight();\n  },\n\n  changeDirection () {\n    let { layer } = this.scene;\n    let surroundingDirections = {}\n\n    this.directions.right = layer.getTileAtWorldXY(this.x + 16, this.y, true);\n    this.directions.left = layer.getTileAtWorldXY(this.x - 16, this.y, true);\n    this.directions.up = layer.getTileAtWorldXY(this.x, this.y - 16, true);\n    this.directions.down = layer.getTileAtWorldXY(this.x, this.y + 16, true);\n\n    for (var direction in this.directions) {\n      if(this.directions[direction].index === 14){\n        surroundingDirections[direction] = this.directions[direction];\n      }\n    };\n\n    const nextDirection = this.randomDirection(surroundingDirections);\n\n    switch(nextDirection) {\n      case 'up' :\n        this.moveUp();\n        break; \n      case 'down' :\n        this.moveDown();\n        break;\n      case 'left' :\n        this.moveLeft();\n        break;\n      case 'right' :\n        this.moveRight();\n        break;\n      default :\n        break;\n    }\n  },\n\n  randomDirection (surroundingDirections) {\n    const objectKeys = Object.keys(surroundingDirections);\n    const directionCount = objectKeys.length;\n    const directionKey = Math.floor(Math.random() * directionCount);\n    \n    if((objectKeys[directionKey] === 'right' && this.currentDirection === 'left') || \n      (objectKeys[directionKey] === 'left' && this.currentDirection === 'right') ||\n      (objectKeys[directionKey] === 'up' && this.currentDirection === 'down') ||\n      (objectKeys[directionKey] === 'down' && this.currentDirection === 'up')) {\n      return this.currentDirection;\n    }\n    \n    return objectKeys[directionKey];\n  },\n\n  moveUp () {\n    this.currentDirection = 'up';\n    this.body.setVelocityY(-100);\n    this.play(`${this.ghostType}-up`, true);\n  },\n\n  moveDown () {\n    this.currentDirection = 'down';\n    this.body.setVelocityY(100);\n    this.play(`${this.ghostType}-down`, true);\n  },\n\n  moveLeft () {\n    this.currentDirection = 'left';\n    this.body.setVelocityX(-100);\n    this.play(`${this.ghostType}-left`, true);\n  },\n\n  moveRight () {\n    this.currentDirection = 'right';\n    this.body.setVelocityX(100);\n    this.play(`${this.ghostType}-right`, true);\n  },\n});\n\nexport default Ghost;\n","import Phaser from 'phaser';\nimport PlayerClass from '../classes/player';\nimport GhostClass from '../classes/ghost';\n\nexport default class GameScene extends Phaser.Scene {\n  constructor () {\n    super({ key: 'Game'});\n  }\n\n  preload () {\n    this.load.image('tiles', 'assets/pacman/pacman-tiles.png');\n    this.load.image('player', 'assets/pacman/player.png');\n    this.load.image('ghost', 'assets/pacman/ghost.png');\n    this.load.image('dot', 'assets/pacman/dot.png');\n\n    this.load.spritesheet('pacman',\n      'assets/pacman/pacman.png',\n      { frameWidth: 16, frameHeight: 16 }\n    );\n\n    this.load.spritesheet('characters',\n    'assets/pacman/characters.png',\n    { frameWidth: 16, frameHeight: 16 }\n  );\n    \n    this.load.tilemapTiledJSON('map', 'assets/pacman/pacmap.json');\n  }\n\n  create () {\n    this.score = 0;\n    this.directions = {}\n    this.safeTile = 14;\n    this.tileSize = 16;\n\n    // Add score\n    this.scoreText = this.add.text(20 , 10, `Score: ${this.score}`);\n\n    // Set up Animations\n    this.anims.create({\n      key: 'pacman-eat',\n      frames: this.anims.generateFrameNumbers('characters', { start: 0, end: 2 }),\n      frameRate: 8,\n      repeat: -1,\n    });\n\n    this.anims.create({\n      key: 'pacman-die',\n      frames: this.anims.generateFrameNumbers('characters', { start: 2, end: 13 }),\n      frameRate: 8,\n    });\n\n    const ghostNames = ['blinky', 'pinky', 'inky', 'clyde'];\n    const ghostDirections = ['right', 'left', 'up', 'down'];\n    let spriteIndex = 56;\n\n    ghostNames.forEach(ghost => {\n      ghostDirections.forEach(direction => {\n        this.anims.create({\n          key: `${ghost}-${direction}`,\n          frames: this.anims.generateFrameNumbers('characters', { start: spriteIndex, end: spriteIndex + 1 }),\n          frameRate: 8,\n          repeat: -1,\n        });\n        spriteIndex += 2;\n      })\n      spriteIndex += 6;\n    });\n\n    // Set up the maps / layers\n    this.map = this.make.tilemap({key: 'map'});\n    let tileset = this.map.addTilesetImage('tiles');\n    let dotTile = this.map.addTilesetImage('dot');\n\n    this.layer = this.map.createDynamicLayer('Ground Layer', tileset, 0, 30);\n    this.dotLayer = this.map.createDynamicLayer('Dot Layer', dotTile, -5, 27);\n\n    this.layer.setCollisionByExclusion([this.safeTile, 7], true, this.layer);\n    this.dotLayer.setTileIndexCallback(7, this.eatDot, this);\n\n    // Set up the score\n    this.winningScore = this.dotLayer.layer.properties.dots * 10;\n\n    // Add the player\n    this.player = this.add.existing(new PlayerClass(this, 16 + 28, 16 + 38));\n    this.physics.add.existing(this.player);\n\n    // Add the ghosts\n    let ghosts = this.physics.add.group({ classType: GhostClass, runChildUpdate: true });\n    let blinky = ghosts.get(12 * 16, 15 * 16, 'blinky');\n    let inky = ghosts.get(14 * 16, 15 * 16, 'inky');\n    let pinky = ghosts.get(16 * 16, 15 * 16, 'pinky');\n    let clyde = ghosts.get(16 * 16, 15 * 16, 'clyde');\n\n    // Add the overlaps to interact with surroundings\n    this.physics.add.overlap(this.player, this.dotLayer);\n\n    this.physics.add.overlap(blinky, this.player, this.gameOver, null, this);\n    this.physics.add.overlap(pinky, this.player, this.gameOver, null, this);\n    this.physics.add.overlap(inky, this.player, this.gameOver, null, this);\n    this.physics.add.overlap(clyde, this.player, this.gameOver, null, this);\n\n    // Set up the keyboard events\n    this.cursors = this.input.keyboard.createCursorKeys();\n\n    // Start the player moving\n    this.player.moveRight();\n\n    // Start the ghosts moving\n    blinky.start();\n    pinky.start();\n    inky.start();\n    clyde.start();\n  }\n\n  update (time) {\n    // Get the tiles around the player\n    this.directions.right = this.layer.getTileAtWorldXY(this.player.x + 16, this.player.y, true);\n    this.directions.left = this.layer.getTileAtWorldXY(this.player.x - 16, this.player.y, true);\n    this.directions.up = this.layer.getTileAtWorldXY(this.player.x, this.player.y - 16, true);\n    this.directions.down = this.layer.getTileAtWorldXY(this.player.x, this.player.y + 16, true);\n\n    // Capture the users intended direction\n    if (this.cursors.down.isDown) {\n      this.nextDirection = 'down';\n    } else if (this.cursors.up.isDown) {\n      this.nextDirection = 'up';\n    } else if (this.cursors.left.isDown) {\n      this.nextDirection = 'left';\n    } else if (this.cursors.right.isDown) {\n      this.nextDirection = 'right';\n    }\n\n    // Wait until its possible to take the direction and move\n    if (this.nextDirection === 'down' && this.canTurn('down')) {\n      this.player.moveDown();\n    } else if (this.nextDirection === 'up' && this.canTurn('up')) {\n      this.player.moveUp();\n    } else if (this.nextDirection === 'left' && this.canTurn('left')) {\n      this.player.moveLeft();\n    } else if (this.nextDirection === 'right' && this.canTurn('right')) {\n      this.player.moveRight();\n    }\n\n    // Check for the win condition\n    if(this.winningScore === this.score) {\n      this.scene.start('Post');\n    }\n  }\n\n  canTurn (direction) {\n    return this.directions[direction].index === this.safeTile;\n  }\n\n  eatDot (sprite, tile) {\n    this.dotLayer.removeTileAt(tile.x, tile.y);\n    this.score += 10;\n    this.scoreText.text = `Score: ${this.score}`;\n\n    return false;\n  }\n\n  gameOver () {\n    this.player.die();\n  }\n};\n","import Phaser from 'phaser';\n\nexport default class PostScene extends Phaser.Scene {\n  constructor () {\n    super('GameOver');\n  }\n\n  create () {\n    const {clientWidth, clientHeight} = this.game.canvas;\n\n    this.add.text((clientWidth / 2 - 40) , (clientHeight / 2 - 10), 'Game Over!');\n    this.input.manager.enabled = true;\n    this.cursors = this.input.keyboard.createCursorKeys();\n  }\n\n  update (time) {\n    if (this.cursors.space.isDown && time > 4000) {\n      this.scene.start('Game');\n    }\n  }\n};\n","import Phaser from 'phaser';\n\nexport default class PostScene extends Phaser.Scene {\n  constructor () {\n    super('Post');\n  }\n\n  create () {\n    const {clientWidth, clientHeight} = this.game.canvas;\n\n    this.add.text((clientWidth / 2 - 40) , (clientHeight / 2 - 10), 'Winner!');\n    this.input.manager.enabled = true;\n    this.cursors = this.input.keyboard.createCursorKeys();\n  }\n\n  update (time) {\n    if (this.cursors.space.isDown && time > 4000) {\n      if (this.cursors.space.isDown) {\n        this.scene.start('Game');\n      }\n    }\n  }\n};\n","import Phaser from 'phaser';\nimport BootScene from '../scenes/bootScene';\nimport GameScene from '../scenes/gameScene';\nimport GameOverScene from '../scenes/gameOverScene';\nimport WinningScene from '../scenes/winnerScene';\n\nexport default {\n  type: Phaser.AUTO,\n  parent: 'phaser-container',\n  width: 460,\n  height: 307,\n  physics: {\n    default: 'arcade',\n  },\n  scene: [BootScene, GameScene, GameOverScene, WinningScene],\n  extend: {\n    player: null,\n    cursors: null,\n    score: 0,\n  }\n};\n","import React, { Component } from 'react';\nimport PacmanConfig from './config/config';\nimport Phaser from 'phaser';\n\nclass Game extends Component {\n  constructor() {\n    super();\n    this.game = null;\n  }\n\n  componentDidMount () {\n    this.game = new Phaser.Game(PacmanConfig);\n    console.log(this.game)\n  }\n\n  componentWillUnmount () {\n    this.game.destroy(true);\n  }\n\n  render() {\n    return (\n      <div className=\"phaserContainer\" id=\"phaser-container\" />\n    ); \n  }\n}\n\nexport default Game;\n"],"sourceRoot":""}