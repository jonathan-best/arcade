{"version":3,"sources":["games/invaders/scenes/bootScene.js","games/invaders/classes/bullet.js","games/invaders/classes/alienBullet.js","games/invaders/classes/alien.js","games/invaders/classes/player.js","games/invaders/scenes/gameScene.js","games/invaders/scenes/winnerScene.js","games/invaders/scenes/gameOverScene.js","games/invaders/config/config.js","games/invaders/index.js"],"names":["BootScene","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","clientHeight","game","canvas","add","text","input","manager","enabled","cursors","keyboard","createCursorKeys","space","isDown","scene","start","Phaser","Scene","Bullet","Class","Extends","Physics","Arcade","Sprite","initialize","speed","born","fire","player","x","y","height","setPosition","Math","GetSpeed","update","time","delta","setActive","setVisible","Alien","width","direction","die","_this","anims","play","on","disableBody","aliens","remove","preUpdate","Player","moveLeft","body","velocity","moveRight","GameScene","key","load","image","spritesheet","frameWidth","frameHeight","sky","tileSprite","create","frames","generateFrameNumbers","end","frameRate","score","scoreText","concat","existing","PlayerClass","physics","setCollideWorldBounds","bullets","group","classType","runChildUpdate","alienBullets","AlienBullet","gameOver","bulletTime","lastFired","lastAlienFired","enableBody","physicsBodyType","ARCADE","allowGravity","alienCount","overlap","enemyHit","playerHit","collision","setTo","tilePositionY","left","right","bullet","get","alienFire","children","entries","length","randomAlien","floor","random","destroy","alien","PostScene","_this$game$canvas","clientWidth","config","type","AUTO","parent","default","WinnerScene","GameOverScene","extend","Game","InvadersConfig","react_default","a","createElement","className","id","Component"],"mappings":"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","file":"static/js/4.019ba71c.chunk.js","sourcesContent":["import Phaser from 'phaser';\n\nexport default class BootScene extends Phaser.Scene {\n  constructor () {\n    super('Boot');\n  }\n\n  create () {\n    const {clientHeight} = this.game.canvas;\n    \n    this.add.text(120 , (clientHeight / 2 - 10), 'Press Spacebar To Start');\n    this.input.manager.enabled = true;\n    this.cursors = this.input.keyboard.createCursorKeys();\n  }\n\n  update () {\n    if (this.cursors.space.isDown) {\n      this.scene.start('Game');\n    }\n  }\n};\n","import Phaser from 'phaser';\n\nlet Bullet = new Phaser.Class({\n\n  Extends: Phaser.Physics.Arcade.Sprite,\n\n  initialize:\n\n  function Bullet (scene) {\n    Phaser.Physics.Arcade.Sprite.call(this, scene, 0, 0, 'bullet');\n\n    this.speed = 0;\n    this.born = 0;\n  },\n\n  fire: function (player) {\n    const {x, y, height} = player;\n\n    this.setPosition(x, y - height);\n    this.speed = Phaser.Math.GetSpeed(-1000, 1);\n    this.born = 0;\n  },\n\n  update: function (time, delta) {\n    this.y += this.speed * delta;\n    this.born += delta;\n\n    if (this.born > 1000) {\n      this.setActive(false);\n      this.setVisible(false);\n    }\n  },\n});\n\nexport default Bullet;\n","import Phaser from 'phaser';\n\nlet Bullet = new Phaser.Class({\n\n  Extends: Phaser.Physics.Arcade.Sprite,\n\n  initialize:\n\n  function Bullet (scene) {\n    Phaser.Physics.Arcade.Sprite.call(this, scene, 0, 0, 'enemyBullet');\n    this.speed = 0;\n    this.born = 0;\n  },\n\n  fire: function (player) {\n    const {x, y} = player;\n\n    this.setPosition(x, y);\n    this.speed = Phaser.Math.GetSpeed(-300, 1);\n    this.born = 0;\n  },\n\n  update: function (time, delta) {\n    this.y -= this.speed * delta;\n    this.born += delta;\n\n    if (this.born > 4000) {\n      this.setActive(false);\n      this.setVisible(false);\n    }\n  },\n});\n\nexport default Bullet;\n","import Phaser from 'phaser';\n\nconst Alien = new Phaser.Class({\n\n  Extends: Phaser.Physics.Arcade.Sprite,\n\n  initialize:\n\n  function Alien (scene, x, y, width, height, speed) {\n    Phaser.Physics.Arcade.Sprite.call(this, scene, x, y, 'invader');\n    this.direction = -20;\n  },\n\n  die: function(){\n    this.anims.play('explode', true);\n    this.on('animationcomplete', () => {\n      this.disableBody(true, true);\n      this.scene.aliens.remove(this);\n    }, this);\n  },\n\n  preUpdate: function (time, delta) {\n    this.anims.update(time, delta);\n\n    // Move the alien group\n    if (this.direction === 50) {\n      this.direction = -50; // Change the direction\n      this.y += 10; // Lower the aliens\n    }\n\n    if (this.direction < 0) {\n      this.direction += 1;\n      this.x -= 2;\n    } else if (this.direction >= 0) {\n      this.direction += 1;\n      this.x += 2;\n    }\n  },\n});\n\nexport default Alien;\n","import Phaser from 'phaser';\n\nconst Player = new Phaser.Class({\n\n  Extends: Phaser.Physics.Arcade.Sprite,\n\n  initialize:\n\n  function Player (scene, x, y, width, height, speed) {\n    Phaser.Physics.Arcade.Sprite.call(this, scene, x, y, 'ship');\n    this.setPosition(200, 250);\n  },\n\n  moveLeft: function() {\n    this.body.velocity.x = -200;\n  },\n\n  moveRight: function() {\n    this.body.velocity.x = 200;\n  },\n\n  die: function(){\n    this.anims.play('explode', true);\n    this.on('animationcomplete', () => {\n      this.disableBody(true, true);\n      this.scene.game.scene.start('GameOver');\n    }, this);\n  },\n});\n\nexport default Player;\n","import Phaser from 'phaser';\nimport Bullet from '../classes/bullet';\nimport AlienBullet from '../classes/alienBullet';\nimport Alien from '../classes/alien';\nimport PlayerClass from '../classes/player';\n\nexport default class GameScene extends Phaser.Scene {\n  constructor () {\n    super({ key: 'Game'});\n  }\n\n  preload () {\n    this.load.image('sky', \"/assets/invaders/starfield.png\");\n    this.load.image('ship', \"/assets/invaders/player.png\");\n    this.load.image('bullet', '/assets/invaders/bullet.png');\n    this.load.image('enemyBullet', '/assets/invaders/enemy-bullet.png');\n    this.load.image('invader', '/assets/invaders/invader.png');\n    this.load.spritesheet('explode',\n      'assets/invaders/explode.png',\n      { frameWidth: 128, frameHeight: 128 }\n    );\n  }\n\n  create () {\n    this.sky = this.add.tileSprite(200, 200, 512, 512, 'sky');\n\n    // Set up animation effects\n    this.anims.create({\n      key: 'explode',\n      frames: this.anims.generateFrameNumbers('explode', { start: 0, end: 15 }),\n      frameRate: 60,\n    });\n\n    //  The score\n    this.score = 0;\n    this.scoreText = this.add.text(20 , 10, `Score: ${this.score}`);\n\n    // Set up the player\n    this.player = this.add.existing(new PlayerClass(this, 24, 24));\n    this.physics.add.existing(this.player);\n    this.player.setCollideWorldBounds(true);\n\n    // Set up the bullets\n    this.bullets = this.physics.add.group({ classType: Bullet, runChildUpdate: true });\n    this.alienBullets = this.physics.add.group({ classType: AlienBullet, runChildUpdate: true });\n    this.gameOver = false;\n    this.bulletTime = 0;\n    this.lastFired = 0;\n    this.lastAlienFired = 0;\n    this.bullets.enableBody = true;\n    this.bullets.physicsBodyType = Phaser.Physics.ARCADE;\n\n    // Set up the Controls\n    this.cursors = this.input.keyboard.createCursorKeys();\n\n    // Set up Aliens\n    this.aliens = this.physics.add.group({ allowGravity: true });\n\n    this.alienCount = 0;\n\n    for (let y = 1; y < 4; y++) {\n      for (let x = 0; x < 10; x++) {\n        this.aliens.add(new Alien(this, x * 48, y * 30, 100, 100, 0.005), true);\n        this.alienCount += 1;\n      }\n    }\n\n    // Add the hit detection\n    this.physics.add.overlap(this.bullets, this.aliens, this.enemyHit, null, this);\n    this.physics.add.overlap(this.alienBullets, this.player, this.playerHit, null, this);\n    this.physics.add.overlap(this.aliens, this.player, this.collision, null, this);\n  }\n\n  update (time) {\n    this.player.body.velocity.setTo(0, 0);\n    this.sky.tilePositionY += 1;\n\n    if(!this.gameOver) {\n      // Move the player\n      if (this.cursors.left.isDown) {\n        this.player.moveLeft();\n      }\n      else if (this.cursors.right.isDown) {\n        this.player.moveRight();\n      }\n\n      // Fire the laser\n      if (this.cursors.space.isDown && time > this.lastFired) {\n        let bullet = this.bullets.get();\n        bullet.setActive(true);\n        bullet.setVisible(true);\n\n        if (bullet) {\n          bullet.fire(this.player);\n          this.lastFired = time + 200;\n        }\n      }\n\n      if (this.alienCount === 0) {\n        this.scene.start('Post');\n      }\n\n      if (time > this.lastAlienFired + 2000){\n        this.alienFire();\n        this.lastAlienFired = time + 20;\n      }\n    }\n  }\n\n  alienFire () {\n    const aliens = this.aliens.children.entries;\n    const alienCount = aliens.length;\n    const randomAlien = Math.floor(Math.random() * (+alienCount - +0)) + +0;\n    let bullet = this.alienBullets.get();\n\n    bullet.setActive(true);\n    bullet.setVisible(true);\n\n    if (bullet) {\n      bullet.fire(aliens[randomAlien]);\n    }\n  }\n\n  playerHit (player, bullet) {\n    player.die();\n    bullet.destroy(true, true);\n    this.gameOver = true;\n  }\n\n  collision (player, alien) {\n    player.die();\n    alien.die();\n  }\n\n  enemyHit (bullet, player) {\n    player.die();\n    bullet.destroy(true, true);\n    this.alienCount -= 1;\n    this.score = this.score + 100;\n    this.scoreText.text = `Score: ${this.score}`;\n  }\n};\n","import Phaser from 'phaser';\n\nexport default class PostScene extends Phaser.Scene {\n  constructor () {\n    super('Post');\n  }\n\n  create () {\n    const {clientWidth, clientHeight} = this.game.canvas;\n\n    this.add.text((clientWidth / 2 - 40) , (clientHeight / 2 - 10), 'Winner!');\n    this.input.manager.enabled = true;\n    this.cursors = this.input.keyboard.createCursorKeys();\n  }\n\n  update (time) {\n    if (this.cursors.space.isDown && time > 4000) {\n      if (this.cursors.space.isDown) {\n        this.scene.start('Game');\n      }\n    }\n  }\n};\n","import Phaser from 'phaser';\n\nexport default class PostScene extends Phaser.Scene {\n  constructor () {\n    super('GameOver');\n  }\n\n  create () {\n    const {clientWidth, clientHeight} = this.game.canvas;\n\n    this.add.text((clientWidth / 2 - 40) , (clientHeight / 2 - 10), 'Game Over!');\n    this.input.manager.enabled = true;\n    this.cursors = this.input.keyboard.createCursorKeys();\n  }\n\n  update (time) {\n    if (this.cursors.space.isDown && time > 4000) {\n      this.scene.start('Game');\n    }\n  }\n};\n","import Phaser from 'phaser';\nimport BootScene from '../scenes/bootScene';\nimport GameScene from '../scenes/gameScene';\nimport WinnerScene from '../scenes/winnerScene';\nimport GameOverScene from '../scenes/gameOverScene';\n\nexport default {\n  type: Phaser.AUTO,\n  parent: 'phaser-container',\n  width: 460,\n  height: 307,\n  physics: {\n    default: 'arcade',\n  },\n  scene: [BootScene, GameScene, WinnerScene, GameOverScene],\n  extend: {\n    player: null,\n    cursors: null,\n    bullets: null,\n    lastFired: 0,\n    lastAlienFired: 0,\n    score: 0,\n  }\n};\n","import React, { Component } from 'react';\nimport InvadersConfig from './config/config';\nimport Phaser from 'phaser';\n\nclass Game extends Component {\n  constructor() {\n    super();\n    this.game = null;\n  }\n\n  componentDidMount () {\n    this.game = new Phaser.Game(InvadersConfig);\n  }\n\n  componentWillUnmount () {\n    this.game.destroy(true);\n  }\n\n  render() {\n    return (\n      <div className=\"phaserContainer\" id=\"phaser-container\" />\n    );\n  }\n}\n\nexport default Game;\n"],"sourceRoot":""}